#
# This workflow calls the main distribution pipeline from DuckDB to build, test and (optionally) release the extension
#
name: Main Extension Distribution Pipeline
on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' && github.sha || '' }}
  cancel-in-progress: true

jobs:
  duckdb-next-build:
    name: Build extension binaries (next)
    uses: duckdb/extension-ci-tools/.github/workflows/_extension_distribution.yml@main
    if: false   # Disabled for stability, using stable build instead
    with:
      duckdb_version: main
      ci_tools_version: main
      extension_name: age

  duckdb-stable-build:
    name: Build extension binaries (stable)
    runs-on: ubuntu-latest
    env:
      DUCKDB_VERSION: v1.3.1
      CI_TOOLS_VERSION: v1.3.1
      EXTENSION_NAME: age
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build ccache
      
      - name: Build Extension
        env:
          CI: true
        run: |
          make
      
      - name: Test Extension
        run: |
          echo "LOAD 'age'; SELECT age_version();" | ./build/release/duckdb

  code-quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    env:
      DUCKDB_VERSION: v1.3.1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build ccache
      
      - name: Format Check
        run: |
          make format-check
      
      - name: Build Test
        env:
          CI: true
        run: |
          make
